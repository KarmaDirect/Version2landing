# üöÄ Webstate SaaS - Landing Page Development Rules

## üéØ Objectif Principal
Cr√©er une landing page professionnelle, immersive, tr√®s design et anim√©e pour Webstate (SaaS d'automatisation IA) qui :
- Inspire la confiance
- Met en avant la technologie (automatisation, IA)
- Renforce la conversion
- A un design soign√©, anim√© mais lisible
- Est responsive (mobile + desktop)

## üìê Structure de la Landing Page

### 1. **Hero Section**
- Texte impactant + animation visuelle styl√©e
- Titre principal accrocheur
- Sous-titre explicatif
- CTA principal

### 2. **CTA Section**
- Bouton d'action (prise de RDV)
- Design attractif et conversion-focused

### 3. **Section "Pourquoi nous choisir"**
- 2 ou 3 blocs avec illustrations anim√©es
- Avantages concurrentiels
- Technologies mises en avant

### 4. **Section "Cas d'usage"** (4 parties)
1. **T√©moignage client** entreprise artisanale
2. **Tableau des probl√®mes concrets** rencontr√©s
3. **Tableau des automatisations IA** mises en place avec Webstate
4. **R√©sultats chiffr√©s** (RDV gagn√©s, √©conomies, ROI)
- Utiliser des ic√¥nes
- Fond gris clair ou anim√© avec MagicUI (ex: warp-background)
- Blocs bien s√©par√©s
- Style professionnel et conversion

### 5. **Section t√©moignages ou r√©sultats**
- Social proof
- M√©triques de succ√®s

### 6. **Section pricing ou "commencer maintenant"**
- Offres et tarifs
- CTA final

### 7. **Footer sobre mais styl√©**
- Informations de contact
- Liens l√©gaux
- Design coh√©rent

## üé® Contraintes UI/UX Strictes

### ‚úÖ OBLIGATOIRE - Utiliser MagicUI
- **TOUS** les composants doivent venir de MagicUI
- Utiliser la commande : `/mcp_magicui_[nom_du_composant]`
- Exemples : `/mcp_magicui_globe`, `/mcp_magicui_aurora_text`, `/mcp_magicui_shiny_button`

### ‚ùå INTERDICTIONS ABSOLUES
- ‚ùå Importer un package npm
- ‚ùå Cr√©er des composants en dehors de MagicUI
- ‚ùå G√©n√©rer des styles bruts sans Tailwind
- ‚ùå Appeler une animation CSS custom
- ‚ùå Ajouter des assets externes (SVG, polices ou images)
- ‚ùå Modifier les couleurs des composants MagicUI (utiliser exactement comme sur le site officiel)

## üìÅ Architecture de Fichiers

```
src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx                ‚Üí Landing page principale
‚îÇ   ‚îî‚îÄ‚îÄ globals.css             ‚Üí Styles globaux + variables CSS
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ magicui/                ‚Üí Composants MagicUI (via MCP ou JSON)
‚îÇ   ‚îî‚îÄ‚îÄ ui/                     ‚Üí Composants UI internes ou shadcn
‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îî‚îÄ‚îÄ utils.ts                ‚Üí Fonction cn() pour fusionner les classes
```

## üîß R√®gles Techniques

### Imports
- Utiliser les imports relatifs via `@/components/‚Ä¶`
- Tous les composants dans `/components/ui/` ou `/components/magicui/`
- Pages dans `/app/` (Next.js app router)

### JSX et Apostrophes
- Dans les cha√Ænes JSX : utiliser `&apos;` ou `&#39;` pour les apostrophes
- Dans les objets JavaScript : apostrophes normales avec √©chappement `\'`

### Composants MagicUI
- Ajouter un composant √† la fois
- Description explicite de l'emplacement et de la raison
- Validation requise avant de passer au suivant
- En cas de probl√®me : revenir √† la version pr√©c√©dente

### D√©veloppement
- Lancer l'application localement pour voir les modifications en temps r√©el
- Mode composant : tout doit √™tre modulaire
- UX SaaS haut de gamme
- Animations de scroll (sticky, reveal) si disponibles dans MagicUI
- Interactions hover/click si disponibles dans MagicUI

## üö® Gestion des Composants Manquants

Si un composant MagicUI n√©cessaire n'existe pas :
> "As-tu un composant MagicUI √† me donner pour [X] ? Sinon, veux-tu que je te propose une version simplifi√©e avec Tailwind + Framer Motion ?"

## üìã Checklist de Validation

- [ ] Architecture de fichiers respect√©e
- [ ] Tous les composants viennent de MagicUI
- [ ] Aucun import npm externe
- [ ] Design responsive (mobile + desktop)
- [ ] Animations et interactions appropri√©es
- [ ] Structure en 7 sections respect√©e
- [ ] Section cas d'usage avec 4 parties
- [ ] Style professionnel SaaS haut de gamme
- [ ] Conversion optimis√©e
- [ ] Code compilable et int√©gr√©

## üéØ Priorit√©s de D√©veloppement

1. **Phase 1** : Architecture et structure de base
2. **Phase 2** : Hero section avec animations
3. **Phase 3** : Sections de contenu principales
4. **Phase 4** : Section cas d'usage d√©taill√©e
5. **Phase 5** : Optimisations et finitions

## üí° Composants MagicUI Recommand√©s

### Animations et Effets
- `aurora-text` - Titres anim√©s
- `warp-background` - Arri√®re-plans anim√©s
- `globe` - √âl√©ments visuels tech
- `shiny-button` - Boutons CTA
- `animated-beam` - Effets de connexion
- `meteors` - Effets visuels

### Layout et Structure
- `bento-grid` - Grilles de contenu
- `dock` - Navigation
- `scroll-progress` - Indicateur de progression
- `animated-list` - Listes anim√©es

### Textes et Typographie
- `text-animate` - Animations de texte
- `typing-animation` - Effet machine √† √©crire
- `number-ticker` - Compteurs anim√©s

### Interactions
- `ripple-button` - Boutons interactifs
- `shimmer-button` - Effets de brillance
- `interactive-hover-button` - Hover effects

---

**Note** : Ce fichier doit √™tre consult√© √† chaque modification pour s'assurer du respect des contraintes et de la coh√©rence du projet. 